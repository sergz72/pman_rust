namespace pman_lib {
  void lib_init();
  [Throws=PmanError]
  u64 create(PasswordDatabaseType database_type, string password, string? password2, bytes? key_file_contents);
  [Throws=PmanError]
  u64 prepare(bytes data, string file_name);
  [Throws=PmanError]
  boolean is_read_only(u64 database_id);
  [Throws=PmanError]
  sequence<string> pre_open(u64 database_id, bytes password_hash, bytes? password2_hash, bytes? key_file_contents);
  [Throws=PmanError]
  void open(u64 database_id, sequence<bytes> data);
  [Throws=PmanError]
  sequence<FileAction> save(u64 database_id);
  [Throws=PmanError]
  void close(u64 database_id);
  [Throws=PmanError]
  void set_argon2(u64 database_id, u64 hash_id, u64 iterations, u64 parallelism, u64 memory);
};

[Error]
interface PmanError {
    ErrorMessage(string error_text);
};

enum PasswordDatabaseType {
	"KeePass",
	"Pman",
};

enum HashAlgorithm {
	"Argon2",
};

enum CryptoEngine {
	"AES",
	"Chacha20"
};

interface FileAction {
    string get_file_name();
    bytes get_data();
};